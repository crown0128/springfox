import springfox.gradlebuild.plugins.MultiProjectReleasePlugin
/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

if (!isSnapshot()) {

  apply plugin: 'com.jfrog.bintray'

  bintray {
    user = project.bintrayCredentials.username
    key = project.bintrayCredentials.password


    publications = ['mavenJava']
    dryRun = MultiProjectReleasePlugin.dryRun(project) //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
      repo = 'maven-repo'
      userOrg = 'springfox' //An optional organization name when the repo belongs to one of the user's orgs
      name = 'springfox'
      desc = 'A suite of libraries for documenting spring based JSON APIs '
      websiteUrl = 'https://github.com/springfox/springfox'
      issueTrackerUrl = 'https://github.com/springfox/springfox/issues'
      vcsUrl = 'https://github.com/springfox/springfox.git'
      licenses = ['Apache-2.0']
      labels = ['spring', 'swagger', 'apis']
      publicDownloadNumbers = true

      //Optional version descriptor
//    version {
//      name = '1.3-Final' //Bintray logical version name
//      desc = 'optional, version-specific description'
//      released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//      vcsTag = '1.3.0'
//      attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//      gpg {
//        sign = true //Determines whether to GPG sign the files. The default is false
//        passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//      }
//      mavenCentralSync {
//        sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//        user = 'userToken' //OSS user token
//        password = 'paasword' //OSS user password
//        close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//      }
//    }
    }
  }
}

def isSnapshot() {
  String.valueOf(project.version).endsWith("-SNAPSHOT")
}