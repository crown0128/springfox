import springfox.gradlebuild.plugins.MultiProjectReleasePlugin

apply plugin: 'maven-publish'

ext {
  relUsername = project.hasProperty('bintrayUsername') ? project.property('bintrayUsername') : 'admin'
  relPassword = project.hasProperty('bintrayPassword') ? project.property('bintrayPassword') : 'password'

  pomMetaData = {
    resolveStrategy = Closure.DELEGATE_FIRST
    name "${project.name}"
    url "https://github.com/springfox/springfox"
    description "JSON API documentation for spring based applications"

    scm {
      url "scm:git:git@github.com:springfox/springfox.git"
      connection 'scm:git:git@github.com:springfox/springfox.git'
      developerConnection 'scm:git:git@github.com:springfox/springfox.git'
    }

    licenses {
      license {
        name "The Apache Software License, Version 2.0"
        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution "repo"
      }
    }
    developers {
      developer {
        id "martypitt@me.com"
        name "Marty Pitt"
        organization "The Mango Factory"
        email "martypitt@me.com"
      }
      developer {
        id "dilipkrish"
        name "Dilip Krishnan"
        organization "The Container Store"
        email "dilipkrish_subscriptions@yahoo.com"
      }
      developer {
        id "adrianbk"
        name "Adrian Kelly"
        organization "DiUS Computing"
        email "adrianbkelly+swagger@gmail.com"
      }
    }
  }

  // TODO - findout if this has been fixed in gradle and remove this hack if do
  // Gradle's maven-publish plugin does not yet handle pom generation correctly. Fix expected in 2.1
  springfoxPomConfig = {
    def root = asNode()
    def dependencies = root.dependencies
    def allDependencies = dependencies.'*'

    allDependencies.findAll() {
      project.configurations.provided.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each() {
      it.scope*.value = 'provided'
    }

    //Fix issue with maven-publish plugin setting compile deps to runtime
    allDependencies.findAll() {
      it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each() {
      it.scope*.value = 'compile'
    }

    allDependencies
        .findAll { it.artifactId.text() == 'groovy-all' }
        .each { it.scope*.value = 'test' }


    root.children().last() + pomMetaData
  }
}

task packageSources(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}


if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

publishing {

  repositories {
    configure(rootProject.ext.releaseRepos)
  }

  publications {
    mavenJava(MavenPublication) {
      groupId 'io.springfox'
      from components.java

      artifact packageSources {
        classifier "sources"
      }

      artifact(javadocJar) {
        classifier = 'javadoc'
      }
      //TODO - not right that every artifact has the same (pom) dependencies
      pom.withXml springfoxPomConfig
    }
  }
}

if (!isSnapshot()) {

  apply plugin: 'com.jfrog.bintray'
  bintray {
    user = rootProject.ext.bintrayCredentials.username
    key = rootProject.ext.bintrayCredentials.password


    publications = ['mavenJava']
    dryRun = MultiProjectReleasePlugin.dryRun(project) //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
      repo = 'maven-repo'
      userOrg = 'springfox' //An optional organization name when the repo belongs to one of the user's orgs
      name = 'springfox'
      desc = 'A suite of libraries for documenting spring based JSON APIs '
      websiteUrl = 'https://github.com/springfox/springfox'
      issueTrackerUrl = 'https://github.com/springfox/springfox/issues'
      vcsUrl = 'https://github.com/springfox/springfox.git'
      licenses = ['Apache-2.0']
      labels = ['spring', 'swagger', 'apis']
      publicDownloadNumbers = true

      //Optional version descriptor
//      version {
//        name = '${project.rootProject.version}' //Bintray logical version name
//        desc = 'Version: ${project.rootProject.version}'
//        released = '${new java.util.Date()}' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ'
//         OR a java.util.Date instance
//        vcsTag = '${project.rootProject.version}'
//      attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//      gpg {
//        sign = true //Determines whether to GPG sign the files. The default is false
//        passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//      }
//      mavenCentralSync {
//        sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//        user = 'userToken' //OSS user token
//        password = 'paasword' //OSS user password
//        close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//      }
//      }
    }
  }
}

def isSnapshot() {
  project.gradle.startParameter.taskNames.contains("snapshot")
}

