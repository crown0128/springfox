ext {
  relUsername = project.hasProperty('bintray_username') ? project.property('bintray_username') : 'admin'
  relPassword = project.hasProperty('bintray_password') ? project.property('bintray_password') : 'password'

  pomMetaData = {
    resolveStrategy = Closure.DELEGATE_FIRST
    name "${project.name}"
    url "https://github.com/springfox/springfox"
    description "JSON API documentation for spring based applications"

    scm {
      url "scm:git:git@github.com:springfox/springfox.git"
      connection 'scm:git:git@github.com:springfox/springfox.git'
      developerConnection 'scm:git:git@github.com:springfox/springfox.git'
    }

    licenses {
      license {
        name "The Apache Software License, Version 2.0"
        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution "repo"
      }
    }
    developers {
      developer {
        id "martypitt@me.com"
        name "Marty Pitt"
        organization "The Mango Factory"
        email "martypitt@me.com"
      }
      developer {
        id "dilipkrish"
        name "Dilip Krishnan"
        organization "The Container Store"
        email "dilipkrish_subscriptions@yahoo.com"
      }
      developer {
        id "adrianbk"
        name "Adrian Kelly"
        organization "DiUS Computing"
        email "adrianbkelly+swagger@gmail.com"
      }
    }
  }

  // TODO - findout if this has been fixed in gradle and remove this hack if do
  // Gradle's maven-publish plugin does not yet handle pom generation correctly. Fix expected in 2.1
  springfoxPomConfig = {
    def root = asNode()
    def dependencies = root.dependencies
    def allDependencies = dependencies.'*'

    allDependencies.findAll() {
      project.configurations.provided.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each() {
      it.scope*.value = 'provided'
    }

    //Fix issue with maven-publish plugin setting compile deps to runtime
    allDependencies.findAll() {
      it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each() {
      it.scope*.value = 'compile'
    }

    allDependencies
            .findAll { it.artifactId.text() == 'groovy-all' }
            .each { it.scope*.value = 'test' }


    root.children().last() + pomMetaData
  }
}


task packageSources(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}


if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}
