import springfox.gradlebuild.BuildInfo
import springfox.gradlebuild.utils.ProjectDefinitions

apply plugin: "org.asciidoctor.convert"
asciidoctor {
  sourceDir = file('docs/asciidoc')
  logDocuments = true
  separateOutputDirs = false
  backends = ['html5']

  attributes 'source-highlighter': 'coderay',
          'springfox-current-version': latestSnapshotVersion(project),
          'springfox-released-version': latestReleasedVersion(project),
          'springfox-swagger-ui-rfc6570-version': "${rootProject.ext.springfoxRfc6570Version}",
          toc: 'left',
          idprefix: '',
          idseparator: '-',
          icons: 'font',
          encoding: 'utf-8'
}

def latestSnapshotVersion(project) {
  if (project.rootProject.buildInfo.isReleaseBuild) {
    return project.rootProject.buildInfo.nextVersion.asText()
  }
  return project.version.toString()
}

def latestReleasedVersion(project) {
  if (project.rootProject.buildInfo.isReleaseBuild) {
    return project.version.toString()
  }
  return project.rootProject.buildInfo.currentVersion.asText()
}

task publishDocs(type: Exec) {
  description = "Publishes reference documentation"
  group = "release"

  String symlink = 'snapshot'
  String docVersion = project.version
  BuildInfo buildInfo = project.rootProject.buildInfo

  if (project.hasProperty('updateMode')) {
    symlink = 'current'
    docVersion = buildInfo.currentVersion.asText()
  } else {
    symlink = project.rootProject.buildInfo.isReleaseBuild ? 'current' : 'snapshot'
  }

  def docPublishInfo = """Publishing docs with ...
        latest snapshot version: ${latestSnapshotVersion(project)}
        latest release version: ${latestReleasedVersion(project)}
        symlink: ${symlink}
        docVersion: ${docVersion}
        project version: ${project.version}
"""
  project.logger.info(docPublishInfo)


  String gitChanges = ""
  ['build/asciidoc/*'    : "docs",
   'build/docs/javadoc/*': "javadoc"].each { source, destination ->
    String dir = "${destination}/${docVersion}/"
    gitChanges += """rm -rf $dir
      mkdir -p $dir
      cp -r $source $dir
      rm -rf ${destination}/${symlink}
      ln -sf ${docVersion}/ ${destination}/${symlink}
      git add $dir ${destination}/${symlink}
"""
  }

  def commands = """
  git config --local user.email "bot@springfox.io"
  git config --local user.name "Springfox Robot"
  git fetch origin +gh-pages:gh-pages
  git checkout gh-pages
  $gitChanges
  git commit -qm "Publish docs/${project.version}"
  git push -q "https://${System.getenv("GITHUB_TOKEN")}@github.com/springfox/springfox.git" gh-pages > /dev/null 2>&1
  git checkout master
  git config --local --unset user.email
  git config --local --unset user.name
"""

  if (buildInfo.dryRun) {
    logger.info("Will run the following command:")
    logger.info(commands)
    commandLine "sh", "-c", "echo This is a dry run"
    return
  }

  commandLine "sh", "-c", commands
}

def isSnapshot(project) {
  String.valueOf(project.version).endsWith("-SNAPSHOT")
}

task allJavadoc(type: Javadoc) {
  final def publishables = ProjectDefinitions.publishables(project)
  source publishables.collect { it.sourceSets.main.allJava }
  classpath = files(publishables.collect { it.sourceSets.main.compileClasspath })
  destinationDir = file("${buildDir}/docs/javadoc")
}


task docs {
  dependsOn asciidoctor
  doLast {
    println asciidoctor.attributes
    println asciidoctor.properties
    Class.forName("java.awt.Desktop").newInstance().browse(file("${asciidoctor.outputDir}/index.html").toURI())
  }
}

publishDocs.dependsOn asciidoctor
publishDocs.dependsOn allJavadoc