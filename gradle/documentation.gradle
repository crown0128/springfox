import springfox.gradlebuild.utils.ProjectDefinitions
import springfox.gradlebuild.version.BuildscriptVersionResolver

/*
 *
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
apply plugin: "org.asciidoctor.convert"
asciidoctor {
  sourceDir = file('asciidoc')
  logDocuments = true
  separateOutputDirs = false
  backends = ['html5']

  attributes 'source-highlighter': 'coderay',
          'springfox-version': project.version.toString(),
          toc: 'left',
          idprefix: '',
          idseparator: '-',
          icons: 'font',
          encoding: 'utf-8'
}

task publishDocs(type: Exec) {

  String symlink = "snapshot"
  if (!BuildscriptVersionResolver.isSnapshot(project)) {
    symlink = 'current'
  }

  String gitChanges = ""
  ['build/asciidoc/*'    : "docs",
   'build/docs/javadoc/*': "javadoc"].each { source, destination ->
    String dir = "${destination}/${project.version}"
    gitChanges += """rm -rf $dir
      mkdir -p $dir
      cp -r $source $dir
      ln -sf ${project.version} "${destination}/${symlink}"
      git add $dir
"""
  }
  commandLine "sh", "-c",
          """
  git config user.email "bot@springfox.io"
  git config user.name "Springfox Robot"
  git fetch origin +gh-pages:gh-pages
  git checkout gh-pages
  $gitChanges
  git commit -qm "Publish docs/${project.version}"
  git push -q "https://${System.getenv("GITHUB_TOKEN")}@github.com/springfox/springfox.git" gh-pages > /dev/null 2>&1
  git checkout master
"""
}

task allJavadoc(type: Javadoc) {
  final def publishable = ProjectDefinitions.publishable(project)
  source publishable.collect { it.sourceSets.main.allJava }
  classpath = files(publishable.collect { it.sourceSets.main.compileClasspath })
  destinationDir = file("${buildDir}/docs/javadoc")
}

publishDocs.dependsOn asciidoctor
publishDocs.dependsOn allJavadoc