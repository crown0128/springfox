ext {
  limits = [
      'instruction': 97,
      'branch'     : 95,
      'line'       : 97,
      'complexity' : 94,
      'method'     : 94,
      'class'      : 95.5
  ]
}

sourceSets {
  integrationTest { sourceSet ->
    ["java", "groovy", "scala", "resources"].each {
      if (!sourceSet.hasProperty(it)) return
      sourceSet."$it".srcDir file("src/integration-test/${it}")
    }
  }
}


// Define integration test task
task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
  compile project(':springfox-spi')
  compile project(':springfox-schema')
  compile project(':springfox-core')
  compile project(':springfox-swagger-common')
  compile libs.core
  compile libs.spring
  compile libs.swagger2Core


  provided libs.springProvided
  provided libs.clientProvided
  provided project(':springfox-spring-webmvc')

  compile "org.mapstruct:mapstruct:$mapstruct"
  annotationProcessor "org.mapstruct:mapstruct-processor:$mapstruct"

  testCompile project(':springfox-core').sourceSets.test.output
  testCompile project(':springfox-schema').sourceSets.test.output
  testCompile project(':springfox-swagger-common').sourceSets.test.output
  testCompile project(':springfox-spring-web').sourceSets.test.output
  testCompile project(':springfox-spring-webmvc').sourceSets.test.output
  testCompile libs.test

  integrationTestCompile sourceSets.main.output
  integrationTestCompile sourceSets.test.output
  integrationTestCompile configurations.testCompile
  integrationTestRuntime configurations.testRuntime
}

compileJava {
  options.compilerArgs += [
          "-Amapstruct.defaultComponentModel=spring",
          "-Amapstruct.unmappedTargetPolicy=ERROR"
          ]
}