import groovy.json.JsonBuilder

apply from: "$rootDir/gradle/dependencies.gradle"

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.adrianbk:gradle-jvmsrc-plugin:0.6.1"
    classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0"
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  }
}

ext {
  apiKey = System.getenv('GIT_HUB_API_KEY')
  projectVersion = '0.9.2-SNAPSHOT'
}

subprojects {
  apply plugin: 'groovy'
  apply plugin: 'java'
  apply plugin: 'project-report'
  compileJava.options.encoding = 'UTF-8'
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  //Adds provide dependency configuration
  configurations {
    provided
    compile.extendsFrom provided
  }

  group = 'com.mangofactory'
  version = projectVersion

  apply plugin: 'com.github.adrianbk.jvmsrc'
  jvmsrc {
    packageName "${group}.swagger"
  }

  jar {
    manifest {
      attributes(
              'Implementation-Title': "${project.name}",
              'Implementation-Version': version.toString(),
              'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
              'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
              'Build-Time': "${new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")}",
              'Built-By': System.getProperty('user.name'),
              'Built-On': "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}"
      )
    }
  }

  apply plugin: 'checkstyle'
  checkstyle {
    configFile = file("$rootDir/config/checkstyle.xml")
  }

  apply plugin: 'maven-publish'
  apply from: "$rootDir/gradle/publishing.gradle"

  apply from: "$rootDir/gradle/coverage.gradle"

  repositories {
    jcenter()
  }

}
//This should be moved to a plugin
task triggerDownstreamBuilds << {
  def gitToken = System.getenv('GIT_HUB_API_KEY')
  assert gitToken

  def travisClient = new groovyx.net.http.RESTClient('https://api.travis-ci.org/')
  travisClient.ignoreSSLIssues() //Untrusted travisci ssl cert
  def httpHeaders = [
          "Content-Type": "application/json",
          "User-Agent"  : "SwaggerSpringmvc",
          "Host"        : "api.travis-ci.org",
          "Accept"      : "application/vnd.travis-ci.2+json"
  ]

  def tokBuilder = new JsonBuilder()
  tokBuilder {
    github_token "$gitToken"
  }
  def accessTokenResp = travisClient.post(
          contentType: 'application/json',
          path: 'auth/github',
          headers: httpHeaders,
          body: tokBuilder.toString()
  )
  def accessToken = accessTokenResp.data.access_token


  def buildsResp = travisClient.get(
          path: 'repos/adrianbk/swagger-springmvc-demo/builds',
          headers: httpHeaders + ["Authorization": "token ${accessToken}"],
  )
  def lastBuildId = buildsResp.data.builds[0].id

  def jsonBuilder = new JsonBuilder()
  jsonBuilder {
    env_var {
      name 'LATEST_SSMVC_VERSION'
      value "${projectVersion}"
      'public' true
    }
  }

  //This adds a variable every time - consider using an update
  def envResp = travisClient.post(
          contentType: 'application/json',
          path: 'settings/env_vars',
          query: [repository_id: '1550492'],
          headers: httpHeaders + ["Authorization": "token ${accessToken}"],
          body: jsonBuilder.toString()
  )

  def restartBuildResp = travisClient.post(
          contentType: 'application/json',
          path: "builds/${lastBuildId}/restart",
          headers: httpHeaders + ["Authorization": "token ${accessToken}"],
          body: jsonBuilder.toString()
  )
}

task wrapper(type: Wrapper) {}
