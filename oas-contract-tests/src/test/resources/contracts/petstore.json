{
  "openapi": "3.0.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "tags": [
    {
      "name": "pet-controller",
      "description": "Operations about pets"
    },
    {
      "name": "pet-store-resource",
      "description": "Operations about store"
    },
    {
      "name": "user-controller",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/api/pet": {
      "post": {
        "tags": [
          "pet-controller"
        ],
        "summary": "Add a new pet to the store",
        "operationId": "addPetUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": false
      },
      "put": {
        "tags": [
          "pet-controller"
        ],
        "summary": "Update an existing pet",
        "operationId": "updatePetUsingPUT",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/api/pet/findByStatus": {
      "get": {
        "tags": [
          "pet-controller"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma-separated strings",
        "operationId": "findPetsByStatusUsingGET_1",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_1"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": false
      }
    },
    "/api/pet/findByTags": {
      "get": {
        "tags": [
          "pet-controller"
        ],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma-separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTagsUsingGET_1",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_1"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet_1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": true
      }
    },
    "/api/pet/{petId}": {
      "get": {
        "tags": [
          "pet-controller"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a pet when ID < 10. ID > 10 or non-integers will simulate API error conditions",
        "operationId": "getPetByIdUsingGET_3",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet_1"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet_1"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "headers": {
              "header4": {
                "schema": {
                  "type": "string"
                }
              },
              "header3": {
                "schema": {
                  "type": "string"
                }
              },
              "header2": {
                "schema": {
                  "type": "string"
                }
              },
              "header1": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Pet not found",
            "headers": {
              "header4": {
                "schema": {
                  "type": "string"
                }
              },
              "header3": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          },
          {
            "api_key": []
          }
        ],
        "deprecated": false
      }
    },
    "/api/store/order": {
      "post": {
        "tags": [
          "pet-store-resource"
        ],
        "summary": "Place an order for a pet",
        "operationId": "placeOrderUsingPOST",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Order Status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "placed",
                "approved",
                "delivered"
              ]
            }
          },
          {
            "name": "complete",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "petId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shipDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "deprecated": false
      }
    },
    "/api/store/order/{orderId}": {
      "get": {
        "tags": [
          "Pet Store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderByIdUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "pet-store-resource"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors",
        "operationId": "deleteOrderUsingDELETE",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "deprecated": false
      }
    },
    "/api/user": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/user/createWithArray": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInputUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/user/createWithList": {
      "post": {
        "tags": [
          "user-controller"
        ],
        "summary": "Creates list of users with given input array",
        "operationId": "createUsersWithListInputUsingPOST",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/user/login": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUserUsingGET",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "deprecated": false
      }
    },
    "/api/user/logout": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUserUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/user/{username}": {
      "get": {
        "tags": [
          "user-controller"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByNameUsingGET",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "user-controller"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUserUsingPUT",
        "parameters": [
          {
            "name": "userStatus",
            "in": "query",
            "description": "User Status",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "1-registered",
                "2-active",
                "3-closed"
              ]
            }
          },
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "user-controller"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUserUsingDELETE",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "deprecated": false
      }
    }
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/"
    },
    {
      "url": "https://petstore.swagger.io/"
    }
  ],
  "components": {
    "requestBodies": {
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "List of user object",
        "required": true
      },
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "description": "Pet object that needs to be added to the store",
        "required": true
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      }
    },
    "schemas": {
      "Category": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "Category"
      },
      "Category_1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "Category_1"
      },
      "Order": {
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "identifier": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          }
        },
        "title": "Order"
      },
      "Pet": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "title": "Pet"
      },
      "Pet_1": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category_1"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "identifier": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "title": "Pet_1"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "Tag"
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "identifier": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "User"
      },
      "User_1": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          },
          "username": {
            "type": "string"
          }
        },
        "title": "User_1"
      }
    }
  }
}