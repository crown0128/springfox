{
  "swagger": "2.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {

    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "feature-demonstration-service",
      "description": "Demonstration of features"
    }
  ],
  "produces": [
    "application/xml",
    "application/json"
  ],
  "paths": {
    "/features/addFiles": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "Add a new contact with file attachment",
        "operationId": "addFilesUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "files",
            "in": "formData",
            "description": "files",
            "required": true,
            "type": "array",
            "items": {
              "type": "file"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/allMethodsAllowed": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "head": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingHEAD_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingDELETE_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "options": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingOPTIONS_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "allMethodAllowed",
        "operationId": "allMethodAllowedUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/arrayOfArrays": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "arrayOfArrays",
        "operationId": "arrayOfArraysUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "arrayOfEnums",
            "description": "arrayOfEnums",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "PRODUCT",
                    "SERVICE"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/features/bare": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "getBare",
        "operationId": "getBareUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "nestedType.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "allCapsSet",
            "in": "query",
            "description": "description of allCapsSet",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "parentBeanProperty",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "foo",
            "in": "query",
            "description": "description of foo",
            "required": true,
            "type": "string",
            "enum": [
              "man",
              "chu"
            ]
          },
          {
            "name": "bar",
            "in": "query",
            "description": "description of bar",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "enumType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ONE",
              "TWO"
            ]
          },
          {
            "name": "readOnlyString",
            "in": "query",
            "description": "A read only string",
            "required": false,
            "type": "string"
          },
          {
            "name": "annotatedEnumType",
            "in": "query",
            "description": "description of annotatedEnumType",
            "required": false,
            "type": "string",
            "enum": [
              "ONE",
              "TWO"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/bigDecimal": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateBigDecimal",
        "operationId": "updateBigDecimalUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "query",
            "description": "input",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/boolean": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateBoolean",
        "operationId": "updateBooleanUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "query",
            "description": "input",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/date": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateDate",
        "operationId": "updateDateUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "localDate",
            "in": "query",
            "description": "localDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/effective": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "getEffective",
        "operationId": "getEffectiveUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Example"
            }
          }
        }
      }
    },
    "/features/effectives": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "getEffectives",
        "operationId": "getEffectivesUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Example"
              }
            }
          }
        }
      }
    },
    "/features/examples": {
      "put": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateListOfExamples",
        "operationId": "updateListOfExamplesUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "examples",
            "in": "query",
            "description": "examples",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/Example"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/integers": {
      "put": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateListOfIntegers",
        "operationId": "updateListOfIntegersUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "integers",
            "in": "query",
            "description": "integers",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/listOfMaps": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "listOfMaps",
        "operationId": "listOfMapsUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Map\u00abstring,string\u00bb"
              }
            }
          }
        }
      }
    },
    "/features/mapOfMapOfExample": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "mapOfMapOfExample",
        "operationId": "mapOfMapOfExampleUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/Example"
                }
              }
            }
          }
        }
      }
    },
    "/features/mapProperty": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "modelWithMapProperty",
        "operationId": "modelWithMapPropertyUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ModelWithMapProperty"
            }
          }
        }
      }
    },
    "/features/modelAttributes": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "getModelAttribute",
        "operationId": "getModelAttributeUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "complexProp.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "listProp",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "arrayProp",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "stringProp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "intProp",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/propertyWithArrayOfArrays": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "propertyWithArrayOfArrays",
        "operationId": "propertyWithArrayOfArraysUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "model",
            "description": "model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelWithArrayOfArrays"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/propertyWithObjectNode": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "propertyWithObjectNode",
        "operationId": "propertyWithObjectNodeUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "model",
            "description": "model",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelWithObjectNode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/status": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateBaz",
        "operationId": "updateBazUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "enumType",
            "in": "query",
            "description": "enumType",
            "required": false,
            "type": "string",
            "enum": [
              "ONE",
              "TWO"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/statuses": {
      "post": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "updateBazes",
        "operationId": "updateBazesUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "enumType",
            "in": "query",
            "description": "enumType",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ONE",
                "TWO"
              ]
            },
            "collectionFormat": "multi",
            "enum": [
              "ONE",
              "TWO"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/features/{petId}": {
      "get": {
        "tags": [
          "feature-demonstration-service"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions",
        "operationId": "getPetByIdUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "string",
            "maximum": 5.0,
            "minimum": 1.0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        },
        "x-test1": "value1",
        "x-test2": {
          "name2": "value2"
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "LocalDateTime": {
      "type": "object",
      "properties": {
        "centuryOfEra": {
          "type": "integer",
          "format": "int32"
        },
        "chronology": {
          "$ref": "#/definitions/Chronology"
        },
        "dayOfMonth": {
          "type": "integer",
          "format": "int32"
        },
        "dayOfWeek": {
          "type": "integer",
          "format": "int32"
        },
        "dayOfYear": {
          "type": "integer",
          "format": "int32"
        },
        "era": {
          "type": "integer",
          "format": "int32"
        },
        "fieldTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateTimeFieldType"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateTimeField"
          }
        },
        "hourOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "millisOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "millisOfSecond": {
          "type": "integer",
          "format": "int32"
        },
        "minuteOfHour": {
          "type": "integer",
          "format": "int32"
        },
        "monthOfYear": {
          "type": "integer",
          "format": "int32"
        },
        "secondOfMinute": {
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "weekOfWeekyear": {
          "type": "integer",
          "format": "int32"
        },
        "weekyear": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "yearOfCentury": {
          "type": "integer",
          "format": "int32"
        },
        "yearOfEra": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ModelWithMapProperty": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "description": "Map of params to be sent",
          "additionalProperties": {
          "type": "string"
        }
      }
    },
      "description": "Describes model with map property"
    },
    "ModelWithArrayOfArrays": {
      "type": "object",
      "properties": {
        "arrayOfArrayOfInts": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "ObjectNode": {
      "type": "object"
    },
    "Map\u00abstring,Example\u00bb": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Example"
      }
    },
    "DateTimeField": {
      "type": "object",
      "properties": {
        "durationField": {
          "$ref": "#/definitions/DurationField"
        },
        "leapDurationField": {
          "$ref": "#/definitions/DurationField"
        },
        "lenient": {
          "type": "boolean"
        },
        "maximumValue": {
          "type": "integer",
          "format": "int32"
        },
        "minimumValue": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "rangeDurationField": {
          "$ref": "#/definitions/DurationField"
        },
        "supported": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/DateTimeFieldType"
        }
      }
    },
    "NestedType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "DateTimeZone": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "ModelWithObjectNode": {
      "type": "object",
      "properties": {
        "anyObject": {
          "$ref": "#/definitions/ObjectNode"
        }
      }
    },
    "Map\u00abstring,string\u00bb": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Example": {
      "type": "object",
      "properties": {
        "allCapsSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "annotatedEnumType": {
          "type": "string",
          "enum": [
            "ONE",
            "TWO"
          ]
        },
        "bar": {
          "type": "integer",
          "format": "int32",
          "description": "description of bar"
        },
        "enumType": {
          "type": "string",
          "enum": [
            "ONE",
            "TWO"
          ]
        },
        "foo": {
          "type": "string"
        },
        "localDateTime": {
          "$ref": "#/definitions/LocalDateTime"
        },
        "nestedType": {
          "$ref": "#/definitions/NestedType"
        },
        "parentBeanProperty": {
          "type": "string"
        },
        "propertyWithNoGetterMethod": {
          "type": "string"
        },
        "propertyWithNoSetterMethod": {
          "type": "string"
        },
        "readOnlyString": {
          "type": "string",
          "description": "A read only string",
          "readOnly": true
        }
      }
    },
    "DurationFieldType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "DateTimeFieldType": {
      "type": "object",
      "properties": {
        "durationType": {
          "$ref": "#/definitions/DurationFieldType"
      },
        "name": {
          "type": "string"
    },
        "rangeDurationType": {
          "$ref": "#/definitions/DurationFieldType"
        }
      }
    },
    "Chronology": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/DateTimeZone"
        }
      }
    },
    "DurationField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "precise": {
          "type": "boolean"
        },
        "supported": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/DurationFieldType"
        },
        "unitMillis": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Pet": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}