{
    "swagger": "2.0",
    "info": {
        "description": "Api Documentation",
        "version": "1.0",
        "title": "Api Documentation",
        "termsOfService": "urn:tos",
        "contact": {
            "name": "Contact Email"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "host": "localhost:__PORT__",
    "basePath": "/",
    "tags": [
        {
            "name": "concrete-controller"
        },
        {
            "name": "pet-service"
        },
        {
            "name": "business-service"
        },
        {
            "name": "pet-grooming-service"
        },
        {
            "name": "environment-mvc-endpoint"
        },
        {
            "name": "root-controller"
        },
        {
            "name": "fancy-pet-service"
        },
        {
            "name": "inherited-service-impl"
        },
        {
            "name": "endpoint-mvc-adapter"
        },
        {
            "name": "health-mvc-endpoint"
        },
        {
            "name": "feature-demonstration-service"
        },
        {
            "name": "user"
        },
        {
            "name": "pet"
        },
        {
            "name": "controller-with-no-request-mapping-service"
        },
        {
            "name": "basic-error-controller"
        },
        {
            "name": "metrics-mvc-endpoint"
        },
        {
            "name": "store"
        }
    ],
    "produces": [
        "application/xml",
        "application/json"
    ],
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "root-controller"
                ],
                "summary": "getAll",
                "operationId": "getAllUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/pet": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "operationId": "addPetUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "operationId": "updatePetUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/api/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findPetsByStatusUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "type": "string",
                        "default": "available"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/api/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTagsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "deprecated": true
            }
        },
        "/api/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions",
                "operationId": "getPetByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Pet not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                },
                "security": [
                    {
                        "api_key": [
                            ""
                        ]
                    },
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/api/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "operationId": "placeOrderUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/api/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "operationId": "getOrderByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Order not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrderUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Order not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                }
            }
        },
        "/api/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/api/user/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "operationId": "createUsersWithArrayInputUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/api/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "operationId": "createUsersWithListInputUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "operationId": "loginUserUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/api/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "operationId": "logoutUserUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "operationId": "getUserByNameUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUserUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be deleted",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user supplied"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUserUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    }
                }
            }
        },
        "/autoconfig": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/beans": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/businesses/aliased/{otherId}": {
            "get": {
                "tags": [
                    "business-service"
                ],
                "summary": "Find a business by its id",
                "operationId": "getAliasedPathVariableUsinGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "otherId",
                        "in": "path",
                        "description": "ID of business",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/businesses/byTypes": {
            "get": {
                "tags": [
                    "business-service"
                ],
                "summary": "businessesByCategories",
                "operationId": "businessesByCategoriesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "types",
                        "in": "query",
                        "description": "types",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Biz"
                            }
                        }
                    }
                }
            }
        },
        "/businesses/non-aliased/{businessId}": {
            "get": {
                "tags": [
                    "business-service"
                ],
                "summary": "Find a business by its id",
                "operationId": "getNonAliasedPathVariableUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "businessId",
                        "in": "path",
                        "description": "ID of business",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "security": [
                    {
                        "oauth2": [
                            "scope"
                        ]
                    }
                ]
            }
        },
        "/businesses/responseEntity/{businessId}": {
            "get": {
                "tags": [
                    "business-service"
                ],
                "summary": "getResponseEntity",
                "operationId": "getResponseEntityUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "businessId",
                        "in": "path",
                        "description": "businessId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/businesses/typeEcho": {
            "post": {
                "tags": [
                    "business-service"
                ],
                "summary": "businessTypeEcho",
                "operationId": "businessTypeEchoUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "business",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/businesses/vanilla/{businessId}": {
            "get": {
                "tags": [
                    "business-service"
                ],
                "summary": "getVanillaPathVariable",
                "operationId": "getVanillaPathVariableUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "businessId",
                        "in": "path",
                        "description": "businessId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/child/child-method": {
            "get": {
                "tags": [
                    "inherited-service-impl"
                ],
                "summary": "getSomething",
                "operationId": "getSomethingUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "parameter",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/configprops": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/dump": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/env": {
            "get": {
                "tags": [
                    "environment-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/env/{name}": {
            "get": {
                "tags": [
                    "environment-mvc-endpoint"
                ],
                "summary": "value",
                "operationId": "valueUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/error": {
            "get": {
                "tags": [
                    "basic-error-controller"
                ],
                "summary": "errorHtml",
                "operationId": "errorHtmlUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "basic-error-controller"
                ],
                "summary": "errorHtml",
                "operationId": "errorHtmlUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "basic-error-controller"
                ],
                "summary": "errorHtml",
                "operationId": "errorHtmlUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "basic-error-controller"
                ],
                "summary": "errorHtml",
                "operationId": "errorHtmlUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "basic-error-controller"
                ],
                "summary": "errorHtml",
                "operationId": "errorHtmlUsingOPTIONS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "basic-error-controller"
                ],
                "summary": "errorHtml",
                "operationId": "errorHtmlUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelAndView"
                        }
                    }
                }
            }
        },
        "/fancypets": {
            "post": {
                "tags": [
                    "fancy-pet-service"
                ],
                "summary": "createObject",
                "operationId": "createObjectUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FancyPet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "fancy-pet-service"
                ],
                "summary": "updatePet",
                "operationId": "updatePetUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "pet",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/fancypets/?{someId}": {
            "post": {
                "tags": [
                    "fancy-pet-service"
                ],
                "summary": "createObject",
                "operationId": "createObjectUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FancyPet"
                        }
                    },
                    {
                        "name": "someId",
                        "in": "path",
                        "description": "someId",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            }
        },
        "/features": {
            "get": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "all",
                "operationId": "allUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "all",
                "operationId": "allUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "all",
                "operationId": "allUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "all",
                "operationId": "allUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "all",
                "operationId": "allUsingOPTIONS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "all",
                "operationId": "allUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/features/allMethodsAllowed": {
            "get": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "allMethodAllowed",
                "operationId": "allMethodAllowedUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "allMethodAllowed",
                "operationId": "allMethodAllowedUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "allMethodAllowed",
                "operationId": "allMethodAllowedUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "allMethodAllowed",
                "operationId": "allMethodAllowedUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "options": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "allMethodAllowed",
                "operationId": "allMethodAllowedUsingOPTIONS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "patch": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "allMethodAllowed",
                "operationId": "allMethodAllowedUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/features/bare": {
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "getBare",
                "operationId": "getBareUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "example",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Example"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/features/bigDecimal": {
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "updateBigDecimal",
                "operationId": "updateBigDecimalUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "input",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/double"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/features/date": {
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "updateDate",
                "operationId": "updateDateUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "localDate",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/LocalDate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/features/effective": {
            "get": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "getEffective",
                "operationId": "getEffectiveUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Example"
                        }
                    }
                }
            }
        },
        "/features/effectives": {
            "get": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "getEffectives",
                "operationId": "getEffectivesUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Example"
                            }
                        }
                    }
                }
            }
        },
        "/features/status": {
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "updateBaz",
                "operationId": "updateBazUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "enumType",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/features/statuses": {
            "post": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "updateBazes",
                "operationId": "updateBazesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "enumType",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Collection«string»"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/features/{petId}": {
            "get": {
                "tags": [
                    "feature-demonstration-service"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions",
                "operationId": "getPetByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                }
            }
        },
        "/foo/create-t": {
            "put": {
                "tags": [
                    "concrete-controller"
                ],
                "summary": "create",
                "operationId": "createUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "toCreate",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/foo/get-t": {
            "get": {
                "tags": [
                    "concrete-controller"
                ],
                "summary": "get",
                "operationId": "getUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "health-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "health-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "health-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "health-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "health-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingOPTIONS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "health-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingPATCH",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/mappings": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "tags": [
                    "metrics-mvc-endpoint"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/metrics/{name}": {
            "get": {
                "tags": [
                    "metrics-mvc-endpoint"
                ],
                "summary": "value",
                "operationId": "valueUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/no-request-mapping": {
            "get": {
                "tags": [
                    "controller-with-no-request-mapping-service"
                ],
                "summary": "exampleWithNoRequestMapping",
                "operationId": "exampleWithNoRequestMappingUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Example"
                        }
                    }
                }
            }
        },
        "/petgrooming": {
            "get": {
                "tags": [
                    "pet-grooming-service"
                ],
                "summary": "canGroom",
                "operationId": "canGroomUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/petgrooming/voidMethod/{input}": {
            "delete": {
                "tags": [
                    "pet-grooming-service"
                ],
                "summary": "groomingFunctionThatReturnsVoid",
                "operationId": "groomingFunctionThatReturnsVoidUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "input",
                        "in": "path",
                        "description": "input",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Just testing"
                    }
                }
            }
        },
        "/pets": {
            "get": {
                "tags": [
                    "pet-service"
                ],
                "summary": "List all pets",
                "operationId": "listPetsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "Add a new pet to the store",
                "operationId": "addPetUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "tags": [
                    "pet-service"
                ],
                "summary": "Update an existing pet",
                "operationId": "updatePetUsingPUT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Validation exception"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    }
                }
            }
        },
        "/pets/byName/{name}": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "petEntities",
                "operationId": "petEntitiesUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    }
                }
            }
        },
        "/pets/echo": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "echo",
                "operationId": "echoUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "someInput",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry«string,Pet»"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry«string,Pet»"
                            }
                        }
                    }
                }
            }
        },
        "/pets/findByStatus": {
            "get": {
                "tags": [
                    "pet-service"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findPetsByStatusUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "type": "string",
                        "default": "available"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/pets/findByTags": {
            "get": {
                "tags": [
                    "pet-service"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTagsUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "deprecated": true
            }
        },
        "/pets/grooming": {
            "get": {
                "tags": [
                    "pet-grooming-service"
                ],
                "summary": "canGroom",
                "operationId": "canGroomUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/pets/grooming/voidMethod/{input}": {
            "delete": {
                "tags": [
                    "pet-grooming-service"
                ],
                "summary": "groomingFunctionThatReturnsVoid",
                "operationId": "groomingFunctionThatReturnsVoidUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "input",
                        "in": "path",
                        "description": "input",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Just testing"
                    }
                }
            }
        },
        "/pets/nameToNickNamesMap": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "nameToNickNamesMap",
                "operationId": "nameToNickNamesMapUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry«string,List«string»»"
                            }
                        }
                    }
                }
            }
        },
        "/pets/siblings": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "siblings",
                "operationId": "siblingsUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "pet",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    }
                }
            }
        },
        "/pets/transformPetNameToPetMapToAny": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "transformPetNameToPetMapToAny",
                "operationId": "transformPetNameToPetMapToAnyUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "someInput",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry«string,Pet»"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/pets/transformPetNameToPetMapToGenericOpenMap": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "transformPetNameToPetMapToGenericOpenMap",
                "operationId": "transformPetNameToPetMapToGenericOpenMapUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "someInput",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry«string,Pet»"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/pets/transformPetNameToPetMapToOpenMap": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "transformPetNameToPetMapToOpenMap",
                "operationId": "transformPetNameToPetMapToOpenMapUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "someInput",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Entry«string,Pet»"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/pets/voidMethod/{input}": {
            "delete": {
                "tags": [
                    "pet-grooming-service"
                ],
                "summary": "groomingFunctionThatReturnsVoid",
                "operationId": "groomingFunctionThatReturnsVoidUsingDELETE",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "input",
                        "in": "path",
                        "description": "input",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Just testing"
                    }
                }
            }
        },
        "/pets/{a}/{b}": {
            "get": {
                "tags": [
                    "pet-service"
                ],
                "summary": "method",
                "operationId": "methodUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "a",
                        "in": "path",
                        "description": "a",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "b",
                        "in": "path",
                        "description": "b",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/pets/{name}": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "petByName",
                "operationId": "petByNameUsingPOST",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                }
            }
        },
        "/pets/{petId}": {
            "get": {
                "tags": [
                    "pet-service"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions",
                "operationId": "getPetByIdUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                }
            }
        },
        "/pets/{petId}/pic": {
            "post": {
                "tags": [
                    "pet-service"
                ],
                "summary": "updatePic",
                "operationId": "updatePicUsingPOST",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "petId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "pic",
                        "in": "formData",
                        "description": "pic",
                        "required": false,
                        "type": "ref"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/pets/{petId}/pic/{picId}": {
            "get": {
                "tags": [
                    "pet-service"
                ],
                "summary": "updatePic",
                "operationId": "updatePicUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "petId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "picId",
                        "in": "path",
                        "description": "picId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/trace": {
            "get": {
                "tags": [
                    "endpoint-mvc-adapter"
                ],
                "summary": "invoke",
                "operationId": "invokeUsingGET",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "*/*"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "petstore_auth": {
            "type": "oauth2",
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "flow": "implicit",
            "scopes": {
                "write:pets": "modify pets in your account",
                "read:pets": "read your pets"
            }
        },
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        }
    },
    "definitions": {
        "User": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "identifier": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "DateTimeField": {
            "properties": {
                "durationField": {
                    "$ref": "#/definitions/DurationField"
                },
                "leapDurationField": {
                    "$ref": "#/definitions/DurationField"
                },
                "lenient": {
                    "type": "boolean"
                },
                "maximumValue": {
                    "type": "integer",
                    "format": "int32"
                },
                "minimumValue": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "rangeDurationField": {
                    "$ref": "#/definitions/DurationField"
                },
                "supported": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/DateTimeFieldType"
                }
            }
        },
        "Biz": {
            "properties": {
                "businessType": {
                    "type": "string",
                    "enum": [
                        "PRODUCT",
                        "SERVICE"
                    ]
                },
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "inception": {
                    "$ref": "#/definitions/LocalDate"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "taxDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "Entry«string,List«string»»": {
            "properties": {
                "key": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Void": {},
        "Order": {
            "properties": {
                "complete": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "identifier": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "description": "Order Status",
                    "enum": [
                        "placed",
                        "approved",
                        "delivered"
                    ]
                }
            }
        },
        "LocalDateTime": {
            "properties": {
                "centuryOfEra": {
                    "type": "integer",
                    "format": "int32"
                },
                "chronology": {
                    "$ref": "#/definitions/Chronology"
                },
                "dayOfMonth": {
                    "type": "integer",
                    "format": "int32"
                },
                "dayOfWeek": {
                    "type": "integer",
                    "format": "int32"
                },
                "dayOfYear": {
                    "type": "integer",
                    "format": "int32"
                },
                "era": {
                    "type": "integer",
                    "format": "int32"
                },
                "fieldTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DateTimeFieldType"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DateTimeField"
                    }
                },
                "hourOfDay": {
                    "type": "integer",
                    "format": "int32"
                },
                "millisOfDay": {
                    "type": "integer",
                    "format": "int32"
                },
                "millisOfSecond": {
                    "type": "integer",
                    "format": "int32"
                },
                "minuteOfHour": {
                    "type": "integer",
                    "format": "int32"
                },
                "monthOfYear": {
                    "type": "integer",
                    "format": "int32"
                },
                "secondOfMinute": {
                    "type": "integer",
                    "format": "int32"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "weekOfWeekyear": {
                    "type": "integer",
                    "format": "int32"
                },
                "weekyear": {
                    "type": "integer",
                    "format": "int32"
                },
                "year": {
                    "type": "integer",
                    "format": "int32"
                },
                "yearOfCentury": {
                    "type": "integer",
                    "format": "int32"
                },
                "yearOfEra": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DurationField": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "precise": {
                    "type": "boolean"
                },
                "supported": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/DurationFieldType"
                },
                "unitMillis": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "View": {
            "properties": {
                "contentType": {
                    "type": "string"
                }
            }
        },
        "Category": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Example": {
            "properties": {
                "allCapsSet": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "annotatedEnumType": {
                    "type": "string",
                    "enum": [
                        "ONE",
                        "TWO"
                    ]
                },
                "bar": {
                    "type": "integer",
                    "format": "int32",
                    "description": "description of bar"
                },
                "enumType": {
                    "type": "string",
                    "enum": [
                        "ONE",
                        "TWO"
                    ]
                },
                "foo": {
                    "type": "string"
                },
                "localDateTime": {
                    "$ref": "#/definitions/LocalDateTime"
                },
                "nestedType": {
                    "$ref": "#/definitions/NestedType"
                },
                "parentBeanProperty": {
                    "type": "string"
                },
                "propertyWithNoSetterMethod": {
                    "type": "string"
                }
            }
        },
        "DateTimeZone": {
            "properties": {
                "fixed": {
                    "type": "boolean"
                }
            }
        },
        "Pet": {
            "properties": {
                "age": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "LocalDate": {
            "properties": {
                "centuryOfEra": {
                    "type": "integer",
                    "format": "int32"
                },
                "chronology": {
                    "$ref": "#/definitions/Chronology"
                },
                "dayOfMonth": {
                    "type": "integer",
                    "format": "int32"
                },
                "dayOfWeek": {
                    "type": "integer",
                    "format": "int32"
                },
                "dayOfYear": {
                    "type": "integer",
                    "format": "int32"
                },
                "era": {
                    "type": "integer",
                    "format": "int32"
                },
                "fieldTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DateTimeFieldType"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DateTimeField"
                    }
                },
                "monthOfYear": {
                    "type": "integer",
                    "format": "int32"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "weekOfWeekyear": {
                    "type": "integer",
                    "format": "int32"
                },
                "weekyear": {
                    "type": "integer",
                    "format": "int32"
                },
                "year": {
                    "type": "integer",
                    "format": "int32"
                },
                "yearOfCentury": {
                    "type": "integer",
                    "format": "int32"
                },
                "yearOfEra": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DurationFieldType": {
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "Tag": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Entry«string,Pet»": {
            "properties": {
                "key": {
                    "$ref": "#/definitions/Pet"
                }
            }
        },
        "ModelAndView": {
            "properties": {
                "empty": {
                    "type": "boolean"
                },
                "model": {
                    "type": "object"
                },
                "modelMap": {
                    "$ref": "#/definitions/ModelMap"
                },
                "reference": {
                    "type": "boolean"
                },
                "view": {
                    "$ref": "#/definitions/View"
                },
                "viewName": {
                    "type": "string"
                }
            }
        },
        "NestedType": {
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "ModelMap": {
            "properties": {
                "empty": {
                    "type": "boolean"
                }
            }
        },
        "Chronology": {
            "properties": {
                "zone": {
                    "$ref": "#/definitions/DateTimeZone"
                }
            }
        },
        "FancyPet": {
            "properties": {
                "age": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "DateTimeFieldType": {
            "properties": {
                "durationType": {
                    "$ref": "#/definitions/DurationFieldType"
                },
                "name": {
                    "type": "string"
                },
                "rangeDurationType": {
                    "$ref": "#/definitions/DurationFieldType"
                }
            }
        }
    }
}